name: auto

on:
  schedule:
    - cron: 15,45 0-18,22-23 * * *
  workflow_dispatch:
    inputs:
      rebuild:
        description: '忽略构建记录以重新构建'
        required: false
        type: boolean
      donotpublish:
        description: '构建后不提交发布新版'
        required: false
        type: boolean
      testOption:
        description: 'arm64支持，不支持ijk解码'
        required: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Clone Project
        run: git clone -b main --depth=1 https://github.com/q215613905/TVBoxOS.git
      - name: DIY
        run: |
          chmod +x diy-J.sh
          bash ${{ github.workspace }}/diy-J.sh
      - name: Build With Gradle
        run: |
          num=$(find ${{ github.workspace }} -name gradlew  | awk -F"/" '{print NF-1}')
          DIR=$(find ${{ github.workspace }} -name gradlew  | cut -d \/ -f$num)
          cd $DIR
          chmod +x gradlew
          ./gradlew assemblerelease --build-cache --parallel --daemon --warning-mode all
      - name: Prepare App
        run: |
          mkdir -p ${{ github.workspace }}/apk/
          for file in `find ~ -name "*.apk" -print`; do
            mv "$file" ${{ github.workspace }}/apk/
          done
      - name: Upload App To Artifact
        uses: actions/upload-artifact@v3
        with:
          name: com.github.tvbox.osc
          path: ${{ github.workspace }}/apk/*
      - name: Post To Telegram
        if: ${{ env.commit }}
        working-directory: TVBoxOSC
        run: |
          if [ -n "${{ secrets.CHANNEL_ID }}" ] && [ -n "${{ secrets.BOT_TOKEN }}" ]; then
            OUTPUT="${{ github.workspace }}/apk/"
            export appRelease=$(find $OUTPUT -name "*${{ matrix.userName }}*.apk")
            export sourceCode="${{ github.workspace }}/TVBoxOSC/source-${{ env.commitS }}.zip"
            count=$(wc -m apk/${{ matrix.userName }}-Release.log |cut -d ' ' -f1)
            echo $count
            if [ ${count} -eq 0 ] && [ ${count} -gt 1024 ]; then
              echo -e "Credit: ${{ matrix.userName }}/${{ matrix.repoName }}\nCommit: ${{ env.commit }}\nChangelog:\n${{ env.upStream }}/commits/${{ matrix.branchName }}" > apk/${{ matrix.userName }}-Release.log
            fi
            ESCAPED=`python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.argv[1]))" "$(cat apk/${{ matrix.userName }}-Release.log |sed -e '1s/: \(.*\)\/.*/: #\1/' -e 's#\([&"\/]\)#\\\\\1#g')"`
            #检查源码尺寸，太大则不上传
            file_size=$(du -s ${sourceCode} | awk '{print $1}')
            #文件最大值，1024代表1M
            file_limit_size=20480
            if [[ ${file_size} -lt ${file_limit_size} ]];then
              curl -v "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMediaGroup?chat_id=${{ secrets.CHANNEL_ID }}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FappRelease%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FsourceCode%22%2C%20%22caption%22%3A%22${ESCAPED}%22%7D%5D" -F appRelease="@$appRelease" -F sourceCode="@$sourceCode"
            else
              curl -v "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMediaGroup?chat_id=${{ secrets.CHANNEL_ID }}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FappRelease%22%2C%20%22caption%22%3A%22${ESCAPED}%22%7D%5D" -F appRelease="@$appRelease"
            fi
          fi
